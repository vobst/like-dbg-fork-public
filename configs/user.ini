[general]
# Architecture which is targeted
# Currently only x86_64 and arm64 is supported
arch = x86_64
# Allows creating a descriptive tag so that the same kernel versions
# can be unpacked into different folders, to e.g.: reflect different
# compilation methods
kernel_tag = corjail

[kernel_dl]
# IFF more than one specific version is set below the internal
# hierarchy prioritizes: mmp > tag > commit
# Pull a specific MAJOR.MINOR.PATCH version of the kernel, e.g. 5.15.67
mmp = 5.10.127
# We can checkout a specific release tag like 5.15-rc2
tag =
# Alternatively, we can grab a specific commit
# IFF mmp, tag, and commit are unset, we will automatically grab the latest available commit
commit =

[kernel_builder_docker]
# Force to rebuild the container
force_rebuild = no

[kernel_builder]
# Compiler used for building the Linux kernel
compiler = clang
# Apply all patches in this directory prior to the build.
# - if one patch fails build stops
# - applied in default "iterdir order"
#patch_dir = patch_dir/corjail
patch_dir =
# Directory to hold .mbx files that represent kernel patch sets
mail_patch_dir =
# List of patch sets to apply
am =
# Config options that are only enabled if the kernel is patched
patch_args =
# Mode specifies the kernel configuration.
# Currently 4 options are offered: generic, syzkaller, custom, or config
#   - generic: Builds a debuggable kernel version
#   - syzkaller: Adds more specific kernel configurations that are used for kernel fuzzing
#   - custom: Provide your own set of flags that you want to enable/disable below in 'enable_args' and 'disable_args'.
#             There is **no** need to specify the flags '-e'/'-d'
#   - config: Use a ready-made kernel config
mode = config
# IFF mode == config you can provide a full path to a usable kernel
# config for the requested arch.
# It will be copied into the kernel_root as ".config"
# Specified "extra_args" will still be honored.
# Any other arguments, e.g.: from "generic_args" will be ignored.
#config = ctf/corjail/corconfig
config =
generic_args = -e DEBUG_KERNEL -e DEBUG_INFO -e DEBUG_INFO_DWARF4 -e FRAME_POINTER -e GDB_SCRIPTS -e KALLSYMS -e RELR -d DEBUG_INFO_DWARF5 -d DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT -d DEBUG_INFO_REDUCED -d DEBUG_INFO_COMPRESSED -d DEBUG_INFO_SPLIT -d RANDOMIZE_BASE -d DEBUG_EFI -d DEBUG_INFO_BTF -d SHADOW_CALL_STACK
syzkaller_args = -e DEBUG_FS -e DEBUG_INFO -e KALLSYMS -e KALLSYMS_ALL -e NAMESPACES -e UTS_NS -e IPC_NS -e PID_NS -e NET_NS -e USER_NS -e CGROUP_PIDS -e MEMCG -e CONFIGFS_FS -e SECURITYFS -e KASAN -e KASAN_INLINE -e WARNING -e FAULT_INJECTION -e FAULT_INJECTION_DEBUG_FS -e FAILSLAB -e FAIL_PAGE_ALLOC -e FAIL_MAKE_REQUEST -e FAIL_IO_TIMEOUT -e FAIL_FUTEX -e LOCKDEP -e PROVE_LOCKING -e DEBUG_ATOMIC_SLEEP -e PROVE_RCU -e DEBUG_VM -e REFCOUNT_FULL -e FORTIFY_SOURCE -e HARDENED_USERCOPY -e LOCKUP_DETECTOR -e SOFTLOCKUP_DETECTOR -e HARDLOCKUP_DETECTOR -e BOOTPARAM_HARDLOCKUP_PANIC -e DETECT_HUNG_TASK -e WQ_WATCHDOG --set-val DEFAULT_HUNG_TASK_TIMEOUT 140 --set-val RCU_CPU_STALL_TIMEOUT 100 -e UBSAN -d RANDOMIZE_BASE
# Enable these kernel flags during compilation
enable_args = DEBUG_KERNEL DEBUG_INFO FRAME_POINTER GDB_SCRIPTS KALLSYMS RELR DEBUG_INFO_DWARF4 BPF HAVE_EBPF_JIT ARCH_WANT_DEFAULT_BPF_JIT BPF_SYSCALL BPF_JIT BPF_JIT_DEFAULT_ON BPF_PRELOAD BPF_PRELOAD_UMD BPF_LSM CGROUP_BPF NET_CLS_BPF NET_ACT_BPF BPF_STREAM_PARSER DEBUG_INFO_BTF BPF_EVENTS CONFIG_BPF_KPROBE_OVERRIDE BPF_JIT_ALWAYS_ON BPF_UNPRIV_DEFAULT_OFF XDP_SOCKETS XDP_SOCKETS_DIAG PAGE_POOL_STATS FUNCTION_TRACER FUNCTION_GRAPH_TRACER FTRACE_SYSCALLS KPROBE_EVENTS UPROBE_EVENTS FPROBE DYNAMIC_FTRACE LIVEPATCH CONFIG_NET_SCH_CBQ CONFIG_NET_SCH_HTB CONFIG_NET_SCH_HFSC CONFIG_NET_SCH_PRIO CONFIG_NET_SCH_MULTIQ CONFIG_NET_SCH_RED CONFIG_NET_SCH_SFB CONFIG_NET_SCH_SFQ CONFIG_NET_SCH_TEQL CONFIG_NET_SCH_TBF CONFIG_NET_SCH_CBS CONFIG_NET_SCH_ETF CONFIG_NET_SCH_TAPRIO CONFIG_NET_SCH_GRED CONFIG_NET_SCH_DSMARK CONFIG_NET_SCH_NETEM CONFIG_NET_SCH_DRR CONFIG_NET_SCH_MQPRIO CONFIG_NET_SCH_SKBPRIO CONFIG_NET_SCH_CHOKE CONFIG_NET_SCH_QFQ CONFIG_NET_SCH_CODEL CONFIG_NET_SCH_FQ_CODEL CONFIG_NET_SCH_CAKE CONFIG_NET_SCH_FQ CONFIG_NET_SCH_HHF CONFIG_NET_SCH_PIE CONFIG_NET_SCH_INGRESS CONFIG_NET_SCH_PLUG CONFIG_NET_SCH_ETS CONFIG_NET_SCH_DEFAULT CONFIG_IKCONFIG CONFIG_IKCONFIG_PROC CONFIG_FUNCTION_ERROR_INJECTION CONFIG_FW_CFG_SYSFS CONFIG_KEXEC FW_CFG_SYSFS_CMDLINE DEFAULT_PFIFO_FAST DEBUG_INFO_COMPRESSED_NONE KALLSYMS_ALL CONFIG_SLAB_FREELIST_RANDOM CONFIG_SLAB_FREELIST_HARDENED CONFIG_CGROUP_DEVICE CONFIG_MEMCG CONFIG_VETH CONFIG_BRIDGE CONFIG_BRIDGE_NETFILTER CONFIG_NETFILTER_XT_MATCH_IPVS CONFIG_USER_NS CONFIG_CGROUP_PIDS CONFIG_MEMCG_SWAP CONFIG_BLK_CGROUP CONFIG_BLK_DEV_THROTTLING CONFIG_CGROUP_PERF CONFIG_CGROUP_HUGETLB CONFIG_NET_CLS_CGROUP CONFIG_CGROUP_NET_PRIO CONFIG_CFS_BANDWIDTH CONFIG_IP_NF_TARGET_REDIRECT CONFIG_IP_VS CONFIG_IP_VS_NFCT CONFIG_IP_VS_PROTO_TCP CONFIG_IP_VS_PROTO_UDP CONFIG_IP_VS_RR CONFIG_SECURITY_APPARMOR CONFIG_VXLAN CONFIG_BRIDGE_VLAN_FILTERING CONFIG_IPVLAN CONFIG_MACVLAN CONFIG_DUMMY CONFIG_NF_NAT_TFTP CONFIG_NF_CONNTRACK_TFTP CONFIG_BTRFS_FS CONFIG_BTRFS_FS_POSIX_ACL CONFIG_DM_THIN_PROVISIONING CONFIG_OVERLAY_FS
# Disable these ones
disable_args = DEBUG_INFO_DWARF5 DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT DEBUG_INFO_REDUCED DEBUG_INFO_COMPRESSED DEBUG_INFO_SPLIT RANDOMIZE_BASE DEBUG_EFI SHADOW_CALL_STACK MODULE_ALLOW_BTF_MISMATCH KPROBE_EVENTS_ON_NOTRACE FUNCTION_PROFILER FTRACE_RECORD_RECURSION FTRACE_SORT_STARTUP_TEST NET_SCH_FQ_PIE DEBUG_INFO_COMPRESSED_ZLIB
# Extra arguments regardless of selected mode.
# This allows overwriting already defined options
# Enable/Disable flags are needed here!
extra_args =-e DEBUG_KERNEL -e DEBUG_INFO -e FRAME_POINTER -e GDB_SCRIPTS -e KALLSYMS -e RELR -e DEBUG_INFO_DWARF4 -e KALLSYMS_ALL -d DEBUG_INFO_DWARF5 -d DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT -d DEBUG_INFO_REDUCED -d DEBUG_INFO_COMPRESSED -d DEBUG_INFO_SPLIT -d RANDOMIZE_BASE -d DEBUG_EFI -d SHADOW_CALL_STACK
# Provide a path to a parent directory that houses custom kernel
# modules (see the example)
custom_modules = modules

[rootfs_general]

[rootfs_builder]
# size of rootfs
seek=5120
# Debian distribution release to base rootfs on
# compare: https://www.debian.org/releases/
distribution = bookworm
# Debian packages to install within the rootfs
packages = build-essential,vim,openssh-server,make,sudo,curl,tar,gcc,libc6-dev,time,strace,less,psmisc,openssl,plymouth,file,binutils-dev,git,zsh,pkg-config,gdb,trace-cmd,ripgrep,libboost-regex-dev
# Allows setting the hostname for some more customizability
hostname = LIKE-DBG
# Force to rebuild the container
force_rebuild = no
# Comma separated list of git repos to clone to .local/src
git_clone = https://github.com/libbpf/libbpf-bootstrap,https://github.com/iovisor/bpftrace
# Git repo named dotfiles with a setup script in scripts/install.sh
dotfiles= https://github.com/vobst/dotfiles
# Whether to build the LiME kernel module
# (currently fails)
lime = false
# Compiler to use for anything that is compiled when buidling the rootfs
compiler = clang


[debuggee_docker]
# force a rebuild of the container
force_rebuild = no

[debuggee]
# QEMU cmd
# quemu binary to use. default: qemu-system-{self.qemu_arch}
qemu_bin =
# use another rootfs than the default one
alt_rootfs = ctf/corjail/coros.qcow2
#alt_rootfs =
# overrides choice of kernel
#alt_kern = ctf/corjail/corkern.bzImage
alt_kern =
# Amount of RAM
#memory = 1024
memory = 4096
# Number of cores
smp = 4
# Enable/Disable KVM support
# FIXME: Bug that I cannot set breakpoint on startup_64 on x86_64 kernels
kvm = no
# expose monitor on unix socket
monitorsocket = yes
# record all network traffic
pcap = no
# The `-device vmcoreinfo` will create a fw_cfg entry for a guest to store dump details
vmcoreinfo = no
# Kernel cmd
# Enable/Disable the GDB stub
gdb = yes
# Enable/Disable KASLR
kaslr = no
# Enable/Disable SMEP
smep = yes
# Enable/Disable SMAP
smap = yes
# Enable/Disable KPTI
kpti = yes
# panic âˆˆ [reboot, halt, wait <seconds>]
#   - reboot: Immediate reboot when a kernel panic/oops happens
#   - halt: Wait forever
#   - wait <seconds>: Wait for the specified amount of seconds before rebooting
panic = halt
# Choose order of LSM initialization. This
# overrides CONFIG_LSM, and the "security=" parameter.
# comma separated list of lsm modules
lsm = bpf

[debugger]
# force a rebuild of the container
force_rebuild = no
# this script is passed to gdb
gdb_script = gdb_script_corjail.py
